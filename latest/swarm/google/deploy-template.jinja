resources:
    - name: {{ env["deployment"] }}-template-gpu-worker
      type: compute.v1.instanceTemplates
      properties:
          project: {{ env["project"]  }}
          properties:
              zone: {{ properties["zone"] }}
              machineType: {{ properties["instanceTypeGPUWorker"] }}
              disks:
                  - type: PERSISTENT
                    boot: true
                    autoDelete: true
                    initializeParams:
                        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
                        diskSizeGb: 20
              tags:
                  items:
                      - princeton-access
              scheduling:
                  preemptible: true
              labels:
                  type: seuron-gpu-worker
              guestAccelerators:
                  - acceleratorCount: 1
                    acceleratorType: {{ properties["gpuWorkerAcceleratorType"] }}
              metadata:
                  items:
                      - key: startup-script
                        value: |
                            #!/bin/bash
                            set -e
                            mount -t tmpfs tmpfs /tmp
                            export FERNET_KEY={{ properties["fernetKey"] }}
                            export REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }}
                            if [ -f "/etc/docker_init_done" ]; then
                                echo "docker already setup"
                            else
                                echo ##### Set up Docker #############################################################
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                                apt-key fingerprint 0EBFCD88
                                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                                apt-get update -y
                                apt-get install docker-ce -y
                                usermod -aG docker ubuntu
                                echo ##### Set up NVidia #############################################################
                                # Add the package repositories
                                distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
                                curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -
                                curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | tee /etc/apt/sources.list.d/nvidia-docker.list
                                add-apt-repository -y ppa:graphics-drivers/ppa
                                apt-get update -y

                                DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install nvidia-430 nvidia-container-toolkit nvidia-container-runtime
                                mkdir -p /etc/docker
                                systemctl restart docker
                                touch /etc/docker_init_done
                            fi
                            DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
                            cat << EOF > /etc/docker/daemon.json
                            {
                              "runtimes": {
                                "nvidia": {
                                  "path": "nvidia-container-runtime",
                                  "runtimeArgs": []
                                }
                              }
                            }
                            EOF
                            service docker restart
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=2 {{ properties["seuronImage"] }} airflow worker -q gpu
              networkInterfaces:
                  - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                    subnetwork: $(ref.{{ env["deployment"]  }}-{{ properties["subnetwork"] }}-subnetwork.selfLink)
                    accessConfigs:
                     - type: ONE_TO_ONE_NAT
                       name: External NAT
              serviceAccounts:
                  - scopes:
                        - https://www.googleapis.com/auth/logging.write
                        - https://www.googleapis.com/auth/monitoring.write
                        - https://www.googleapis.com/auth/devstorage.read_write

    - name: {{ env["deployment"] }}-template-atomic-worker
      type: compute.v1.instanceTemplates
      properties:
          project: {{ env["project"]  }}
          properties:
              zone: {{ properties["zone"] }}
              machineType: {{ properties["instanceTypeAtomicWorker"] }}
              disks:
                  - type: PERSISTENT
                    boot: true
                    autoDelete: true
                    initializeParams:
                        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
                        diskSizeGb: 20
              tags:
                  items:
                      - princeton-access
              scheduling:
                  preemptible: true
              labels:
                  type: seuron-atomic-worker
              metadata:
                  items:
                      - key: startup-script
                        value: |
                            #!/bin/bash
                            set -e
                            mount -t tmpfs tmpfs /tmp
                            export FERNET_KEY={{ properties["fernetKey"] }}
                            export REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }}
                            if [ -f "/etc/docker_init_done" ]; then
                                echo "docker already setup"
                            else
                                echo ##### Set up Docker #############################################################
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                                apt-key fingerprint 0EBFCD88
                                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                                apt-get update -y
                                apt-get install docker-ce -y
                                sudo usermod -aG docker ubuntu
                                touch /etc/docker_init_done
                            fi
                            DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
                            service docker restart
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=1 {{ properties["seuronImage"] }} airflow worker -q atomic
              networkInterfaces:
                  - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                    subnetwork: $(ref.{{ env["deployment"]  }}-{{ properties["subnetwork"] }}-subnetwork.selfLink)
                    accessConfigs:
                     - type: ONE_TO_ONE_NAT
                       name: External NAT
              serviceAccounts:
                  - scopes:
                        - https://www.googleapis.com/auth/logging.write
                        - https://www.googleapis.com/auth/monitoring.write
                        - https://www.googleapis.com/auth/devstorage.read_write

    - name: {{ env["deployment"] }}-template-igneous-worker
      type: compute.v1.instanceTemplates
      properties:
          project: {{ env["project"]  }}
          properties:
              zone: {{ properties["zone"] }}
              machineType: {{ properties["instanceTypeAtomicWorker"] }}
              disks:
                  - type: PERSISTENT
                    boot: true
                    autoDelete: true
                    initializeParams:
                        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
                        diskSizeGb: 20
              tags:
                  items:
                      - princeton-access
              scheduling:
                  preemptible: true
              labels:
                  type: seuron-igneous-worker
              metadata:
                  items:
                      - key: startup-script
                        value: |
                            #!/bin/bash
                            set -e
                            mount -t tmpfs tmpfs /tmp
                            export FERNET_KEY={{ properties["fernetKey"] }}
                            export REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }}
                            if [ -f "/etc/docker_init_done" ]; then
                                echo "docker already setup"
                            else
                                echo ##### Set up Docker #############################################################
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                                apt-key fingerprint 0EBFCD88
                                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                                apt-get update -y
                                apt-get install docker-ce -y
                                sudo usermod -aG docker ubuntu
                                touch /etc/docker_init_done
                            fi
                            DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
                            service docker restart
                            docker swarm init
                            docker service create -e FERNET_KEY --name igneous {{ properties["seuronImage"] }} python igneous_exec/task_execution.py --queue igneous --qurl amqp://172.31.31.249:5672
                            docker service scale igneous=32
              networkInterfaces:
                  - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                    subnetwork: $(ref.{{ env["deployment"]  }}-{{ properties["subnetwork"] }}-subnetwork.selfLink)
                    accessConfigs:
                     - type: ONE_TO_ONE_NAT
                       name: External NAT
              serviceAccounts:
                  - scopes:
                        - https://www.googleapis.com/auth/logging.write
                        - https://www.googleapis.com/auth/monitoring.write
                        - https://www.googleapis.com/auth/devstorage.read_write

    - name: {{ env["deployment"] }}-template-composite-worker
      type: compute.v1.instanceTemplates
      properties:
          project: {{ env["project"]  }}
          properties:
              zone: {{ properties["zone"] }}
              machineType: {{ properties["instanceTypeCompositeWorker"] }}
              disks:
                  - type: PERSISTENT
                    boot: true
                    autoDelete: true
                    initializeParams:
                        sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
                        diskSizeGb: 20
              tags:
                  items:
                      - princeton-access
              scheduling:
                  preemptible: true
              labels:
                  type: seuron-composite-worker
              metadata:
                  items:
                      - key: startup-script
                        value: |
                            #!/bin/bash
                            set -e
                            mount -t tmpfs tmpfs /tmp
                            export FERNET_KEY={{ properties["fernetKey"] }}
                            export REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }}
                            if [ -f "/etc/docker_init_done" ]; then
                                echo "docker already setup"
                            else
                                echo ##### Set up Docker #############################################################
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
                                apt-key fingerprint 0EBFCD88
                                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                                apt-get update -y
                                apt-get install docker-ce -y
                                sudo usermod -aG docker ubuntu
                                touch /etc/docker_init_done
                            fi
                            DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
                            service docker restart
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=8 {{ properties["seuronImage"]  }} airflow worker -q composite_5 &
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=4 {{ properties["seuronImage"]  }} airflow worker -q composite_6 &
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=2 {{ properties["seuronImage"]  }} airflow worker -q composite_7 &
                            docker run --restart unless-stopped -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp -e FERNET_KEY -e REMOTE_LOG_FOLDER -e AIRFLOW__CELERY__CELERYD_CONCURRENCY=1 {{ properties["seuronImage"]  }} airflow worker -q composite_8 &
              networkInterfaces:
                  - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                    subnetwork: $(ref.{{ env["deployment"]  }}-{{ properties["subnetwork"] }}-subnetwork.selfLink)
                    accessConfigs:
                     - type: ONE_TO_ONE_NAT
                       name: External NAT
              serviceAccounts:
                  - scopes:
                        - https://www.googleapis.com/auth/logging.write
                        - https://www.googleapis.com/auth/monitoring.write
                        - https://www.googleapis.com/auth/devstorage.read_write

    - name: {{ env["deployment"] }}-bootstrap
      type: compute.v1.instance
      properties:
          zone: {{ properties["zone"] }}
          machineType: https://www.googleapis.com/compute/v1/projects/{{ env["project"] }}/zones/{{ properties["zone"] }}/machineTypes/{{ properties["instanceTypeManager"] }}
          disks:
              - type: PERSISTENT
                boot: true
                autoDelete: true
                initializeParams:
                    sourceImage: https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/family/ubuntu-1604-lts
                    diskSizeGb: 50
          tags:
              items:
                  - princeton-access
                  - http-server
                  - https-server
          labels:
              type: seuron-manager
          metadata:
              items:
                  - key: startup-script
                    value: |
                        #!/bin/bash
                        set -e
                        mkdir -p /var/lib/mysql /var/lib/rabbitmq
                        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - &&
                        apt-key fingerprint 0EBFCD88 &&
                        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
                        apt-get update &&
                        apt-get install docker-ce -y &&

                        export FERNET_KEY={{ properties["fernetKey"] }}
                        export REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }}
                        export SLACK_TOKEN={{ properties["slackToken"]  }}
                        export BOTUSERID={{ properties["botUserID"]  }}
                        export DEPLOYMENT={{ env["deployment"] }}
                        export ZONE={{ properties["zone"] }}
                        export SEURON_TAG={{ properties["seuronImage"] }}

                        export MYSQL_USER="airflow"
                        export MYSQL_PASSWORD="airflow"
                        export MYSQL_DATABASE="airflow"
                        export MYSQL_ROOT_PASSWORD="root_password"
                        export MYSQL_MEM=$(free -m|grep Mem|awk '{print int($2/2)}')

                        echo FERNET_KEY={{ properties["fernetKey"] }} >> /etc/environment
                        echo REMOTE_LOG_FOLDER={{ properties["remoteLogFolder"] }}/{{ env["deployment"] }} >> /etc/environment
                        echo SLACK_TOKEN={{ properties["slackToken"]  }} >> /etc/environment
                        echo BOTUSERID={{ properties["botUserID"]  }} >> /etc/environment
                        echo DEPLOYMENT={{ env["deployment"] }} >> /etc/environment
                        echo ZONE={{ properties["zone"] }} >> /etc/environment
                        echo SEURON_TAG={{ properties["seuronImage"] }} >> /etc/environment

                        echo MYSQL_USER="airflow" >> /etc/environment
                        echo MYSQL_PASSWORD="airflow" >> /etc/environment
                        echo MYSQL_DATABASE="airflow" >> /etc/environment
                        echo MYSQL_ROOT_PASSWORD="root_password" >> /etc/environment
                        echo MYSQL_MEM=$MYSQL_MEM >> /etc/environment

                        export GPU_WORKER_GROUP={{ env["deployment"]  }}-gpu-workers-{{ properties["zone"] }}
                        export ATOMIC_WORKER_GROUP={{ env["deployment"]  }}-atomic-workers-{{ properties["zone"] }}
                        export COMPOSITE_WORKER_GROUP={{ env["deployment"]  }}-composite-workers-{{ properties["zone"] }}
                        export IGNEOUS_WORKER_GROUP={{ env["deployment"]  }}-igneous-workers-{{ properties["zone"] }}

                        if [ -f "/etc/bootstrap_done" ]; then
                            echo "bootstrap has been done already!"
                            sleep 60
                            service docker restart
                            #docker stack deploy -c compose.yml {{ env["deployment"] }}
                            exit 0
                        fi

                        docker swarm init
                        echo '{{ properties["user"] }}' | docker secret create basic_auth_username -
                        echo '{{ properties["password"] }}' | docker secret create basic_auth_password -
                        sudo openssl genrsa 2048 | tee >(
                            docker secret create ssl_certificate_key -) |
                            sudo openssl req -x509 -nodes -days 365 -new -key /dev/stdin -subj "/C=US/ST=NJ/L=P/O=P/OU=SL/CN=SEURON" |
                            docker secret create ssl_certificate -
                        wget -O compose.yml {{ properties["composeLocation"] }}
                        docker stack deploy -c compose.yml {{ env["deployment"] }}
                        gcloud compute instance-groups managed create $GPU_WORKER_GROUP --base-instance-name $GPU_WORKER_GROUP --size 0 --template {{ env["deployment"]  }}-template-gpu-worker --zone {{ properties["zone"] }}
                        gcloud compute instance-groups managed create $ATOMIC_WORKER_GROUP --base-instance-name $ATOMIC_WORKER_GROUP --size 0 --template {{ env["deployment"]  }}-template-atomic-worker --zone {{ properties["zone"] }}
                        gcloud compute instance-groups managed create $COMPOSITE_WORKER_GROUP --base-instance-name $COMPOSITE_WORKER_GROUP --size 0 --template {{ env["deployment"]  }}-template-composite-worker --zone {{ properties["zone"] }}
                        gcloud compute instance-groups managed create $IGNEOUS_WORKER_GROUP --base-instance-name $IGNEOUS_WORKER_GROUP --size 0 --template {{ env["deployment"]  }}-template-igneous-worker --zone {{ properties["zone"] }}

                        touch /etc/bootstrap_done
          networkInterfaces:
              - network: $(ref.{{ env["deployment"] }}-network.selfLink)
                subnetwork: $(ref.{{ env["deployment"]  }}-{{ properties["subnetwork"] }}-subnetwork.selfLink)
                networkIP: {{ properties["managerIP0"] }}
                accessConfigs:
                 - type: ONE_TO_ONE_NAT
                   name: External NAT
          serviceAccounts:
              - scopes:
                    - https://www.googleapis.com/auth/cloud-platform
                    - https://www.googleapis.com/auth/compute
                    - https://www.googleapis.com/auth/servicecontrol
                    - https://www.googleapis.com/auth/service.management.readonly
                    - https://www.googleapis.com/auth/logging.write
                    - https://www.googleapis.com/auth/monitoring.write
                    - https://www.googleapis.com/auth/trace.append
                    - https://www.googleapis.com/auth/devstorage.read_only
                    - https://www.googleapis.com/auth/cloud.useraccounts.readonly
    - name: {{ env["deployment"] }}-network
      type: compute.v1.network
      properties:
          autoCreateSubnetworks: false
    - name: {{ env["deployment"] }}-us-central1-subnetwork
      type: compute.v1.subnetwork
      properties:
          region: us-central1
          ipCidrRange: 172.31.16.0/20
          privateIpGoogleAccess: true
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-us-east1-subnetwork
      type: compute.v1.subnetwork
      properties:
          region: us-east1
          ipCidrRange: 172.31.32.0/20
          privateIpGoogleAccess: true
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-us-west1-subnetwork
      type: compute.v1.subnetwork
      properties:
          region: us-west1
          ipCidrRange: 172.31.48.0/20
          privateIpGoogleAccess: true
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-firewall
      type: compute.v1.firewall
      properties:
          allowed:
              - IPProtocol: tcp
                ports:
                    - 22
                    - 65535
                    - 24864
          sourceRanges:
              - 128.112.0.0/16
              - 140.180.0.0/16
              - 204.153.48.0/23
              - 66.180.176.0/24
              - 66.180.180.0/22
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-firewall-internal
      type: compute.v1.firewall
      properties:
          allowed:
              - IPProtocol: tcp
              - IPProtocol: udp
          sourceRanges:
              - 172.31.16.0/20
              - 172.31.32.0/20
              - 172.31.48.0/20
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
    - name: {{ env["deployment"] }}-firewall-bootstrap-https
      type: compute.v1.firewall
      properties:
          allowed:
              - IPProtocol: tcp
                ports:
                    - 443
                    - 8080
          sourceRanges:
              - 128.112.0.0/16
              - 140.180.0.0/16
              - 204.153.48.0/23
              - 66.180.176.0/24
              - 66.180.180.0/22
          network: $(ref.{{ env["deployment"] }}-network.selfLink)
## vim: set filetype=yaml:
